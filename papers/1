from django.shortcuts import render
from django import forms
from django.conf import settings
from django.utils.translation import ugettext_lazy as _
from django.template.defaultfilters import filesizeformat
from django.template.loader import get_template
from django.template import Context
from django.http import HttpResponse
from django.shortcuts import render,redirect
from django.forms import ModelForm
from django import forms
from dbms.models import User,Topic
from models import Paper,Comment
import datetime, sys
import string,random
import json,sys
from subprocess import call
from django.conf import settings
import os
class UploadForm(ModelForm):
    class Meta:
        model=Paper
        fields=('title','paper_file')


class UploaderForm(forms.Form):
    upload = forms.FileField()


    def clean_upload():
        upload = self.cleaned_data['upload']
        content_type = upload.content_type
        if content_type in settings.CONTENT_TYPES:
            if upload._size > settings.MAX_UPLOAD_SIZE:
                raise forms.ValidationError(_('Please keep filesize under %s. Current filesize %s')\
                       % (filesizeformat(settings.MAX_UPLOAD_SIZE), filesizeformat(upload._size)))
        else:
            raise forms.ValidationError(_('File type is not supported'))

        return upload


def get_user_fromcookie(request):
    cookie_data = request.COOKIES.get('id')
    if User.objects.filter(rand = cookie_data).exists():
        result_set = User.objects.get(rand = cookie_data)
        return result_set


def get_paper_fromid(paper_id):
    try:
        result = Paper.objects.get(id=paper_id)
    except:
        print sys.exc_info
    return result

def convert(filename):
    l = os.path.join(os.path.dirname(__file__), '..', 'media/uploads/')
    l = l+filename
    call(['pdftotext',l])


def upload(request):
    if request.method =='POST':
        t = []
        #form = UploaderForm(request.POST,request.FILES)
        #if form.is_valid():
        paper_title=request.FILES['ups'].name
        uploaded=request.FILES['ups']
        tags = request.POST['tags']
        t = tags.split(',')
        #print uploaded
        #print uploaded.size
        username = get_user_fromcookie(request)        
        data = {'title': paper_title,'paper_file':uploaded}
        form = UploadForm(data)
        obj = Paper(title=paper_title,paper_file=uploaded,user=username)
        obj.save()
        convert(paper_title)
        #form.save()
        '''
        if form.is_valid():
            form.save()
        else:
            print form.errors
        '''
        #return HttpResponse("errros")
        return HttpResponse('Research Paper uploaded')

def get_paper_comments(paper_id):
    try:
        comment_list = Comment.objects.filter(paper_id=paper_id)
        print comment_list
    except:
        print "i am here"
        print sys.exc_info()
        comment_list = []
    return comment_list 

def viewer(request):
    paper_id = request.GET['id']
    result = Paper.objects.get(id=paper_id)
    print "this is paper_id",paper_id
    url=result.paper_file.url
    title = result.title
    comment_list = get_paper_comments(paper_id)
    paper = {'url': url, 'title': title,'comment_list': comment_list,'paper_id': paper_id}
    return render(request, 'frame.html',{'paper': paper})
    #return redirect(url)
    #return HttpResponse(paper_id)

def add_comment(request):
    if request.method == 'POST':
        subject = request.POST['subject']
        content = request.POST['content']
        paper_id = request.POST['paper_id']
        paper = Paper.objects.get(id=paper_id)
        try:
            username = get_user_fromcookie(request)
            print username
        except:
            print sys.exc_info()        
        obj = Comment(user_id=username,subject=subject,content=content,paper_id=paper)
        obj.save()
        return HttpResponse(json.dumps({'status': '200'}))
    return HttpResponse(json.dumps({'status': 501}))
